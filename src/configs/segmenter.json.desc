{
    "daemonize": {
        "_description": "Boolean flag denoting whether or not to daemonise the service.",

        "_type": "boolean",
        
        "_possible_values": [
            true,
            false
        ],
        
        "_default_value": true
    },

    "input_name": {
        "_description": "Name of the placeholder for the input, which is defined at model saving time. If you're unsure of this value, consult the owner or whoever trained the model (assuming you know who it is).",
        
        "_type": "string",

        "_default_value": "image"
    },

    "output_name": {
        "_description": "Name of the placeholder for the network output, which is defined at model saving time. If you're unsure of this value, consult the owner or whoever trained the model (assuming you know who it is).",
        
        "_type": "string",

        "_default_value": "classes"
    },

    "max_receive_message_length": {
        "_description": "Value for the maximum packet size that can be sent to the model server. If the packet size exceeds this specified value, an error will be raised. Specify -1 for unlimited.",
        
        "_type": "int",

        "_default_value": -1
    },

    "max_send_message_length": {
        "_description": "Value for the maximum packet size that can be received from the model server. If the packet size exceeds this specified value, an error will be raised. Specify -1 for unlimited.",
        
        "_type": "int",

        "_default_value": -1
    },

    "model_name": {
        "_description": "Model name specified at Tensorflow Serving model server startup.",
        
        "_type": "string",

        "_default_value": "segmenter"
    },

    "model_server_host": {
        "_description": "Hostname at which the Tensorflow Serving model server can be reached. If the model server is running on the same instance, you can use localhost. Otherwise, treat this as the domain name of the model server.",
        
        "_type": "string",

        "_default_value": "localhost"
    },

    "model_server_port": {
        "_description": "Port at which the Tensorflow Serving model server is listening. The default value Tensorflow Serving model server tends to use is 8500.",
        
        "_type": "int",

        "_default_value": 8500
    },

    "request_timeout": {
        "_description": "The request timeout between this microservice and the model server. If you find that more requests are experiencing timeouts, you can choose to increase this value.",
        
        "_type": "float",

        "_default_value": 30
    },

    "signature_name": {
        "_description": "Name of the signature definition, which is specified at model saving time. If you're unsure of this value, consult the owner or whoever trained the model (assuming you know who it is).",
        
        "_type": "string",

        "_default_value": "serving_default"
    },

    "max_image_size": {
        "_description": "The maximum size of the image (applies to both width and height). If an image's width or height is larger than this value, it will be resized before beind sent to the model server for inference. This configuration serves to protect the model server from excessively large images, which can cause it to run out of memory. The model output will be resized back to their corresponding input dimensions and returned to the client of this microservice.",

        "_type": "integer",

        "_default_value": 1080
    },

    "resizing_interpolation": {
        "_description": "Constant passed to the resizing method denoting the interpolation algorithm that is used to resize the image before it is sent to the model server. Refer to `PIL.Image.resize` for the enum values.",

        "_type": "int",

        "_default_value": 1
    },

    "mask_interpolation": {
        "_description": "Constant passed to the resizing method denoting the interpolation algorithm that is used to resize the image before it is sent to the model server. Refer to `cv2.resize` for the enum values.",

        "_type": "int",

        "_default_value": 3
    },

    "mask_true_value": {
        "_description": "The mask that is generated by the model will indicate what is contained within different parts of the image, including the background. All values that are not the identifier for the background is deemed the foreground, and will set to the value provided by this configuration. It is made so to allow for greater flexibility, in case different clients have different needs (e.g. client A requires {0, 255} values while client B requires {0, 1} boolean-ish values).",

        "_type": "int",

        "_default_value": 255
    },

    "pidfile": {
        "_description": "Path to pidfile, which will store the PID of the server.",

        "_type": "string"
    },

    "port": {
        "_description": "Port for the server to listen to. Think of this as equivalent to Apache's port configuration.",

        "_type": "int",

        "_default_value": 80
    },

    "stdout": {
        "_description": "Path to file to write standard output stream to. You can choose to redirect this to /dev/null, because it tends to get a little bloaty.",

        "_type": "string"
    },

    "stderr": {
        "_description": "Path to file to write standard error stream to.",

        "_type": "string"
    },

    "logname": {
        "_description": "Name of logger used by the daemon. This should be set by the developer, so it should be of little concern during deployent.",

        "_type": "string",

        "_default_value": "segmenter"
    },

    "logging": {
        "_description": "Additional JSON object containing logging configurations that will be used by the server. Fields below this description that do not start with an underscore are additional keys of the JSON object, and not just comments.",

        "version": {
            "_description": "Logger version number. This field is of little consequence and can be ignored for most intents and purposes.",

            "_type": "int",

            "_default_value": 1
        },

        "disable_existing_loggers": {
            "_description": "This ensures that existing loggers are not disabled when these set of logging configurations are initialised.",

            "_type": "boolean",

            "_possible_values": [
                true,
                false
            ],

            "_default_value": false
        },

        "formatters": {
            "_description": "Specification of string output formats, to be used by the logging handlers. The key is the name of the formatter.",

            "standard": {
                "_description": "We use the same logging format throughout, so we only need to specify this one standard formatter.",

                "format": {
                    "_description": "String denoting the desired log output format.",

                    "_type": "string",

                    "_default_value": "%(asctime)s - %(process)d [%(levelname)s] (%(name)s) %(message)s"
                }
            }
        },

        "handlers": {
            "_description": "Specification of logging handlers, which will contain details regarding their stream type, output format, and logging level.",

            "info": {
                "_description": "Info-level logging handler",

                "class": {
                    "_description": "Type of logging output stream. Using logging.FileHandler means this handler will be writing the output to a file.",

                    "_type": "string",

                    "_default_value": "logging.FileHandler"
                },

                "level": {
                    "_description": "Logging level of this handler. Using INFO means this handler will capture all level INFO and above logging entries.",

                    "_type": "string",

                    "_default_value": "INFO"
                },

                "formatter": {
                    "_description": "Formatter class of the handler. We'll be using the one-and-only standard formatter defined above.",

                    "_type": "string",

                    "_default_value": "standard"
                },

                "filename": {
                    "_description": "Path to file to write this handler's output to.",

                    "_type": "string"
                },

                "encoding": {
                    "_description": "Output encoding format of this handler when writing to file. Of little consequence and can be ignored for most intents and purposes.",

                    "_type": "string",

                    "_default_value": "utf-8"
                }
            },

            "error": {
                "_description": "Error-level logging handler",

                "class": {
                    "_description": "Type of logging output stream. Using logging.FileHandler means this handler will be writing the output to a file.",

                    "_type": "string",

                    "_default_value": "logging.FileHandler"
                },

                "level": {
                    "_description": "Logging level of this handler. Using ERROR means this handler will capture all level ERROR and above logging entries.",

                    "_type": "string",

                    "_default_value": "ERROR"
                },

                "formatter": {
                    "_description": "Formatter class of the handler. We'll be using the one-and-only standard formatter defined above.",

                    "_type": "string",

                    "_default_value": "standard"
                },

                "filename": {
                    "_description": "Path to file to write this handler's output to.",

                    "_type": "string"
                },

                "encoding": {
                    "_description": "Output encoding format of this handler when writing to file. Of little consequence and can be ignored for most intents and purposes.",

                    "_type": "string",

                    "_default_value": "utf-8"
                }
            },

            "console-stream": {
                "_description": "Handler for outputting to the console, mainly for easier debugging. Feel free to turn this off for deployments.",

                "class": {
                    "_description": "Type of logging output stream. Using logging.StreamHandler means this handler will be writing the output to a stream.",

                    "_type": "string",

                    "_default_value": "logging.StreamHandler"
                },

                "level": {
                    "_description": "Logging level of this handler. Using DEBUG means this handler will capture all level DEBUG and above logging entries.",

                    "_type": "string",

                    "_default_value": "DEBUG"
                },

                "formatter": {
                    "_description": "Formatter class of the handler. We'll be using the one-and-only standard formatter defined above.",

                    "_type": "string",

                    "_default_value": "standard"
                },

                "stream": {
                    "_description": "Name of stream the handler will write to, which we'll set to stdout.",

                    "_type": "string",

                    "_default_value": "ext://sys.stdout"
                }
            }
        },


        "loggers": {
            "_description": "Definition of loggers instances, their levels, and handlers. If you wish to capture logging output from any other modules in addition to the pre-defined ones, determine their logger names and add them into this object as well.",

            "segmenter": {
                "_description": "The `segmenter` logging instance, which corresponds to the value we'll be using with `logname` in an earlier configuration. This is basically the logger name that the daemon will use.",

                "level": {
                    "_description": "Logging level of this entire logger. We set this to DEBUG to capture all logging output, then allow the attached handlers to filter the logging output messages to their respective assigned levels.",

                    "_type": "string",

                    "_default_value": "DEBUG"
                },

                "handlers": {
                    "_description": "List of handlers to register to this logger. If we register a file handler, then this logger's output will be written to the corresponding log file. If we register a stream hander, then the output will be written to the stream instead (and so on, so forth).",

                    "_type": "array of strings corresponding to defined handler names",

                    "_default_value": [
                        "info",
                        "error",
                        "console-stream"
                    ]
                },

                "propagate": {
                    "_description": "Boolean flag denoting whether or not to allow logging events captured by this logger to propagate to ancestor loggers. Of little consequence and can be ignored.",

                    "_type": "boolean",

                    "_possible_values": [
                        true,
                        false,
                    ],

                    "_default_value": false
                }
            }
        }
    }
}